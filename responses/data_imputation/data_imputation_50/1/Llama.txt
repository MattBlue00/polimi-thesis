Data imputation is a process of replacing missing or null values in a dataset with statistically estimated values. Here's a step-by-step approach to perform data imputation on the given dataset:

### Import necessary libraries

```python
import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
```

### Load the dataset

```python
# Load the dataset
df = pd.read_csv('your_data.csv')
```

### Explore the dataset

```python
# Get the first few rows of the dataset
print(df.head())

# Get the summary statistics of the dataset
print(df.describe())

# Get the count of missing values in each column
print(df.isnull().sum())
```

### Impute missing values

For categorical columns, we can use the `SimpleImputer` with the `strategy='most_frequent'` parameter to replace missing values with the most frequent value in the column.

For numerical columns, we can use the `SimpleImputer` with the `strategy='mean'` or `strategy='median'` parameter to replace missing values with the mean or median of the column.

```python
# Define the categorical columns
categorical_cols = ['status', 'street', 'city', 'state', 'zip_code']

# Define the numerical columns
numerical_cols = ['price', 'bed', 'bath', 'acre_lot', 'house_size']

# Impute missing values in categorical columns
for col in categorical_cols:
    imputer = SimpleImputer(strategy='most_frequent')
    df[col] = imputer.fit_transform(df[[col]])

# Impute missing values in numerical columns
for col in numerical_cols:
    imputer = SimpleImputer(strategy='mean')
    df[col] = imputer.fit_transform(df[[col]])
```

### Impute missing values using regression

For columns like `price`, we can use a regression model to predict the missing values based on other features.

```python
# Define the features and target
X = df.drop('price', axis=1)
y = df['price']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a random forest regressor model
model = RandomForestRegressor()
model.fit(X_train, y_train)

# Predict the missing values
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
print(f'MSE: {mse}')

# Impute the missing values
df['price'] = df['price'].fillna(model.predict(X))
```

### Save the imputed dataset

```python
# Save the imputed dataset to a new CSV file
df.to_csv('imputed_data.csv', index=False)
```

Note that this is just a basic example of data imputation, and the approach may vary depending on the specific characteristics of the dataset and the problem you're trying to solve.