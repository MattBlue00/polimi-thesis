Yes, I can help with data imputation for the given dataset. Data imputation is the process of replacing missing values in a dataset with estimated values. There are several methods to perform data imputation, such as mean imputation, median imputation, mode imputation, and more advanced techniques like k-nearest neighbors (KNN) or machine learning-based imputation.

Here's an example of how you might perform mean imputation for numerical columns and mode imputation for categorical columns using Python and the pandas library:

```python
import pandas as pd
import numpy as np

# Load the dataset
data = pd.read_csv('your_dataset.csv')

# Define a function to perform mean imputation for numerical columns
def mean_imputation(df):
    for column in df.columns:
        if df[column].dtype == 'float64' or df[column].dtype == 'int64':
            df[column].fillna(df[column].mean(), inplace=True)
    return df

# Define a function to perform mode imputation for categorical columns
def mode_imputation(df):
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column].fillna(df[column].mode()[0], inplace=True)
    return df

# Perform mean imputation for numerical columns
data = mean_imputation(data)

# Perform mode imputation for categorical columns
data = mode_imputation(data)

# Display the first few rows of the dataset after imputation
print(data.head())
```

This script will load the dataset, perform mean imputation for numerical columns, and mode imputation for categorical columns, and then display the first few rows of the dataset after imputation.

Please note that this is a basic example and may not be suitable for all datasets. Depending on the nature of your data and the specific requirements of your analysis, you may need to use more sophisticated imputation techniques.