Data imputation is the process of replacing missing or incomplete data with substituted values. Given the complexity and size of your dataset, I'll outline a general approach for handling missing data in each column. The specific imputation strategy can vary based on the nature of the data and the context of the analysis. Here's a step-by-step guide:

1. **Identify Missing Values:**
   - First, identify which columns have missing values and the extent of these missing values.

2. **Categorical Columns:**
   - **`brokered_by` and `status`:** For categorical columns, you can use the mode (most frequent value) to fill missing values. Alternatively, if the missingness is informative, you can create a new category like "Unknown" or "Not Specified."

3. **Numerical Columns:**
   - **`price`, `bed`, `bath`, `acre_lot`, `house_size`:** For numerical columns, you can use the mean or median to fill missing values. The median is often preferred if the data is skewed.
   - For columns like `bed` and `bath`, which are often integers, ensure that the imputed values are also integers.

4. **Addressing Special Cases:**
   - **`prev_sold_date`:** For date columns, you can use the median date or the most recent date available. Alternatively, you can leave them as missing if the date is not critical for your analysis.
   - **`street`, `city`, `state`, `zip_code`:** These can be filled using the mode or left as missing if they are not critical. If the dataset is large and these fields are crucial, you might consider more advanced techniques like using a predictive model to fill them.

5. **Advanced Techniques:**
   - If the dataset is large and complex, consider using machine learning models for imputation, such as k-Nearest Neighbors (KNN) or regression models, which can predict missing values based on other available data.

6. **Consistency Checks:**
   - After imputation, ensure that the data remains consistent. For example, if a property is marked as "sold," it should have a `price`.

Here's a simple example of how you might implement some of these strategies in Python using pandas:

```python
import pandas as pd
import numpy as np

# Assuming df is your DataFrame
df = pd.read_csv('your_dataset.csv')

# Fill categorical columns with mode
df['brokered_by'].fillna(df['brokered_by'].mode()[0], inplace=True)
df['status'].fillna('Unknown', inplace=True)

# Fill numerical columns with median
df['price'].fillna(df['price'].median(), inplace=True)
df['bed'].fillna(df['bed'].median(), inplace=True)
df['bath'].fillna(df['bath'].median(), inplace=True)
df['acre_lot'].fillna(df['acre_lot'].median(), inplace=True)
df['house_size'].fillna(df['house_size'].median(), inplace=True)

# Fill date columns with the most recent date or leave as NaN
df['prev_sold_date'].fillna(df['prev_sold_date'].max(), inplace=True)

# Fill location columns with mode or leave as NaN
df['street'].fillna('Unknown', inplace=True)
df['city'].fillna('Unknown', inplace=True)
df['state'].fillna('Unknown', inplace=True)
df['zip_code'].fillna('Unknown', inplace=True)

# Ensure integer columns remain integers
df['bed'] = df['bed'].astype(int)
df['bath'] = df['bath'].astype(int)

# Check for any remaining missing values
print(df.isnull().sum())
```

This is a basic approach and might need adjustments based on the specific characteristics and requirements of your dataset.